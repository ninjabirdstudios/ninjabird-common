# define some path aliases:
SET(COMMON_ROOT_DIR "${PROJECT_SOURCE_DIR}/common")

# check whether or not certain header files exist:
CHECK_INCLUDE_FILE(stddef.h    CMN_HAVE_STDDEF_H)
CHECK_INCLUDE_FILE(stdint.h    CMN_HAVE_STDINT_H)
CHECK_INCLUDE_FILE(inttypes.h  CMN_HAVE_INTTYPES_H)
CHECK_INCLUDE_FILE(tmmintrin.h CMN_HAVE_TMMINTRIN_H)

# auto-generate the header config file from its template:
CONFIGURE_FILE("${COMMON_ROOT_DIR}/common_config.hpp.in" "${COMMON_ROOT_DIR}/common_config.hpp")

# set global compiler options like always compiling with maximum warning level.
IF(MSVC)
    IF(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
        STRING(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
    ELSE()
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
    ENDIF()
    ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS=1)
    ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE=1)
ELSEIF(CMAKE_COMPILER_IS_GNUCC OR CMAKE_COMPILER_IS_GNUCXX)
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall -Wno-invalid-offsetof")
ENDIF(MSVC)

# search in the root directory for include files:
INCLUDE_DIRECTORIES("${COMMON_ROOT_DIR}")

# Add our top-level libraries. These are generally single .hpp+.cpp
# combinations that can either be built as a library or included directly.
SET(LIBBLOB_PORTABLE_SRCS      libblob.cpp)
SET(LIBDISK_PORTABLE_SRCS      libdisk.cpp)
SET(LIBDATA_PORTABLE_SRCS      libdata.cpp)
SET(LIBHASH_PORTABLE_SRCS      libhash.cpp)
SET(LIBJSON_PORTABLE_SRCS      libjson.cpp)
SET(LIBMATH_PORTABLE_SRCS      libmath.cpp)
SET(LIBUTF8_PORTABLE_SRCS      libutf8.cpp)
SET(LIBIMAGE_PORTABLE_SRCS     libimage.cpp)
SET(LIBSTOMP_PORTABLE_SRCS     libstomp.cpp)
SET(LIBMEMORY_PORTABLE_SRCS    libmemory.cpp libdlmalloc.cpp)
SET(LIBNETWORK_PORTABLE_SRCS   libnetwork.cpp)
SET(LIBSTARTUP_PORTABLE_SRCS   libstartup.cpp)
SET(LIBPROFILE_PORTABLE_SRCS   libprofile.cpp)
SET(LIBPROCESSOR_PORTABLE_SRCS libprocessor.cpp)

# platform-specific include directories, defines and libraries (MacOSX):
IF(APPLE)
    ADD_DEFINITIONS(-DCMN_IS_APPLE=1)
    INCLUDE_DIRECTORIES(/System/Library/Frameworks)
    SET(LIBBLOB_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBBLOB_PLATFORM_SRCS      "")
    SET(LIBDATA_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBDATA_PLATFORM_SRCS      "")
    SET(LIBDISK_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBDISK_PLATFORM_SRCS      "")
    SET(LIBHASH_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBHASH_PLATFORM_SRCS      "")
    SET(LIBJSON_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBJSON_PLATFORM_SRCS      "")
    SET(LIBMATH_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBMATH_PLATFORM_SRCS      "")
    SET(LIBUTF8_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBUTF8_PLATFORM_SRCS      "")
    SET(LIBIMAGE_PLATFORM_LIBS     ${CMAKE_DL_LIBS})
    SET(LIBIMAGE_PLATFORM_SRCS     "")
    SET(LIBSTOMP_PLATFORM_LIBS     ${CMAKE_DL_LIBS})
    SET(LIBSTOMP_PLATFORM_SRCS     "")
    SET(LIBMEMORY_PLATFORM_LIBS    ${CMAKE_DL_LIBS})
    SET(LIBMEMORY_PLATFORM_SRCS    "")
    SET(LIBNETWORK_PLATFORM_LIBS   ${CMAKE_DL_LIBS})
    SET(LIBNETWORK_PLATFORM_SRCS   "")
    SET(LIBSTARTUP_PLATFORM_LIBS   ${CMAKE_DL_LIBS})
    SET(LIBSTARTUP_PLATFORM_SRCS   "")
    SET(LIBPROFILE_PLATFORM_LIBS   ${CMAKE_DL_LIBS})
    SET(LIBPROFILE_PLATFORM_SRCS   "")
    SET(LIBPROCESSOR_PLATFORM_LIBS ${CMAKE_DL_LIBS})
    SET(LIBPROCESSOR_PLATFORM_SRCS "")
ENDIF(APPLE)

# platform-specific include directories, defines and libraries (UNIX):
IF(UNIX AND NOT APPLE)
    ADD_DEFINITIONS(-DCMN_IS_LINUX=1)
    SET(LIBBLOB_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBBLOB_PLATFORM_SRCS      "")
    SET(LIBDATA_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBDATA_PLATFORM_SRCS      "")
    SET(LIBDISK_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBDISK_PLATFORM_SRCS      "")
    SET(LIBHASH_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBHASH_PLATFORM_SRCS      "")
    SET(LIBJSON_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBJSON_PLATFORM_SRCS      "")
    SET(LIBMATH_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBMATH_PLATFORM_SRCS      "")
    SET(LIBUTF8_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBUTF8_PLATFORM_SRCS      "")
    SET(LIBIMAGE_PLATFORM_LIBS     ${CMAKE_DL_LIBS})
    SET(LIBIMAGE_PLATFORM_SRCS     "")
    SET(LIBSTOMP_PLATFORM_LIBS     ${CMAKE_DL_LIBS})
    SET(LIBSTOMP_PLATFORM_SRCS     "")
    SET(LIBMEMORY_PLATFORM_LIBS    ${CMAKE_DL_LIBS})
    SET(LIBMEMORY_PLATFORM_SRCS    "")
    SET(LIBNETWORK_PLATFORM_LIBS   ${CMAKE_DL_LIBS})
    SET(LIBNETWORK_PLATFORM_SRCS   "")
    SET(LIBSTARTUP_PLATFORM_LIBS   ${CMAKE_DL_LIBS})
    SET(LIBSTARTUP_PLATFORM_SRCS   "")
    SET(LIBPROFILE_PLATFORM_LIBS   ${CMAKE_DL_LIBS})
    SET(LIBPROFILE_PLATFORM_SRCS   "")
    SET(LIBPROCESSOR_PLATFORM_LIBS ${CMAKE_DL_LIBS})
    SET(LIBPROCESSOR_PLATFORM_SRCS "")
ENDIF(UNIX AND NOT APPLE)

# platform-specific include directories, defines and libraries (Windows):
IF(WIN32)
    ADD_DEFINITIONS(-DCMN_IS_WINDOWS=1)
    SET(LIBBLOB_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBBLOB_PLATFORM_SRCS      "")
    SET(LIBDATA_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBDATA_PLATFORM_SRCS      "")
    SET(LIBDISK_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBDISK_PLATFORM_SRCS      "")
    SET(LIBHASH_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBHASH_PLATFORM_SRCS      "")
    SET(LIBJSON_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBJSON_PLATFORM_SRCS      "")
    SET(LIBMATH_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBMATH_PLATFORM_SRCS      "")
    SET(LIBUTF8_PLATFORM_LIBS      ${CMAKE_DL_LIBS})
    SET(LIBUTF8_PLATFORM_SRCS      "")
    SET(LIBIMAGE_PLATFORM_LIBS     ${CMAKE_DL_LIBS})
    SET(LIBIMAGE_PLATFORM_SRCS     "")
    SET(LIBSTOMP_PLATFORM_LIBS     ${CMAKE_DL_LIBS})
    SET(LIBSTOMP_PLATFORM_SRCS     "")
    SET(LIBMEMORY_PLATFORM_LIBS    ${CMAKE_DL_LIBS})
    SET(LIBMEMORY_PLATFORM_SRCS    "")
    SET(LIBNETWORK_PLATFORM_LIBS   ${CMAKE_DL_LIBS})
    SET(LIBNETWORK_PLATFORM_SRCS   "")
    SET(LIBSTARTUP_PLATFORM_LIBS   ${CMAKE_DL_LIBS})
    SET(LIBSTARTUP_PLATFORM_SRCS   "")
    SET(LIBPROFILE_PLATFORM_LIBS   ${CMAKE_DL_LIBS})
    SET(LIBPROFILE_PLATFORM_SRCS   "")
    SET(LIBPROCESSOR_PLATFORM_LIBS ${CMAKE_DL_LIBS})
    SET(LIBPROCESSOR_PLATFORM_SRCS "")
ENDIF(WIN32)

# specify the top-level library outputs using ADD_LIBRARY:
IF(CMN_SHARED)
    ADD_DEFINITIONS(-DCMN_SHARED=1)
    ADD_LIBRARY(blob      SHARED ${LIBBLOB_PLATFORM_SRCS}      ${LIBBLOB_PORTABLE_SRCS})
    ADD_LIBRARY(data      SHARED ${LIBDATA_PLATFORM_SRCS}      ${LIBDATA_PORTABLE_SRCS})
    ADD_LIBRARY(disk      SHARED ${LIBDISK_PLATFORM_SRCS}      ${LIBDISK_PORTABLE_SRCS})
    ADD_LIBRARY(hash      SHARED ${LIBHASH_PLATFORM_SRCS}      ${LIBHASH_PORTABLE_SRCS})
    ADD_LIBRARY(json      SHARED ${LIBJSON_PLATFORM_SRCS}      ${LIBJSON_PORTABLE_SRCS})
    ADD_LIBRARY(math      SHARED ${LIBMATH_PLATFORM_SRCS}      ${LIBMATH_PORTABLE_SRCS})
    ADD_LIBRARY(utf8      SHARED ${LIBUTF8_PLATFORM_SRCS}      ${LIBUTF8_PORTABLE_SRCS})
    ADD_LIBRARY(image     SHARED ${LIBIMAGE_PLATFORM_SRCS}     ${LIBIMAGE_PORTABLE_SRCS})
    ADD_LIBRARY(stomp     SHARED ${LIBSTOMP_PLATFORM_SRCS}     ${LIBSTOMP_PORTABLE_SRCS})
    ADD_LIBRARY(memory    SHARED ${LIBMEMORY_PLATFORM_SRCS}    ${LIBMEMORY_PORTABLE_SRCS})
    ADD_LIBRARY(network   SHARED ${LIBNETWORK_PLATFORM_SRCS}   ${LIBNETWORK_PORTABLE_SRCS})
    ADD_LIBRARY(startup   SHARED ${LIBSTARTUP_PLATFORM_SRCS}   ${LIBSTARTUP_PORTABLE_SRCS})
    ADD_LIBRARY(profile   SHARED ${LIBPROFILE_PLATFORM_SRCS}   ${LIBPROFILE_PORTABLE_SRCS})
    ADD_LIBRARY(processor SHARED ${LIBPROCESSOR_PLATFORM_SRCS} ${LIBPROCESSOR_PORTABLE_SRCS})
ELSE(CMN_SHARED)
    ADD_DEFINITIONS(-DCMN_SHARED=0)
    ADD_LIBRARY(blob      STATIC ${LIBBLOB_PLATFORM_SRCS}      ${LIBBLOB_PORTABLE_SRCS})
    ADD_LIBRARY(data      STATIC ${LIBDATA_PLATFORM_SRCS}      ${LIBDATA_PORTABLE_SRCS})
    ADD_LIBRARY(disk      STATIC ${LIBDISK_PLATFORM_SRCS}      ${LIBDISK_PORTABLE_SRCS})
    ADD_LIBRARY(hash      STATIC ${LIBHASH_PLATFORM_SRCS}      ${LIBHASH_PORTABLE_SRCS})
    ADD_LIBRARY(json      STATIC ${LIBJSON_PLATFORM_SRCS}      ${LIBJSON_PORTABLE_SRCS})
    #ADD_LIBRARY(math      STATIC ${LIBMATH_PLATFORM_SRCS}      ${LIBMATH_PORTABLE_SRCS})
    ADD_LIBRARY(utf8      STATIC ${LIBUTF8_PLATFORM_SRCS}      ${LIBUTF8_PORTABLE_SRCS})
    ADD_LIBRARY(image     STATIC ${LIBIMAGE_PLATFORM_SRCS}     ${LIBIMAGE_PORTABLE_SRCS})
    ADD_LIBRARY(stomp     STATIC ${LIBSTOMP_PLATFORM_SRCS}     ${LIBSTOMP_PORTABLE_SRCS})
    ADD_LIBRARY(memory    STATIC ${LIBMEMORY_PLATFORM_SRCS}    ${LIBMEMORY_PORTABLE_SRCS})
    ADD_LIBRARY(network   STATIC ${LIBNETWORK_PLATFORM_SRCS}   ${LIBNETWORK_PORTABLE_SRCS})
    ADD_LIBRARY(startup   STATIC ${LIBSTARTUP_PLATFORM_SRCS}   ${LIBSTARTUP_PORTABLE_SRCS})
    ADD_LIBRARY(profile   STATIC ${LIBPROFILE_PLATFORM_SRCS}   ${LIBPROFILE_PORTABLE_SRCS})
    ADD_LIBRARY(processor STATIC ${LIBPROCESSOR_PLATFORM_SRCS} ${LIBPROCESSOR_PORTABLE_SRCS})
ENDIF(CMN_SHARED)
